{"meta":{"title":"星下小屋","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"java学习笔记(一)","slug":"java学习笔记-一","date":"2020-03-05T06:38:37.000Z","updated":"2020-03-05T06:46:59.535Z","comments":true,"path":"2020/03/05/java学习笔记-一/","link":"","permalink":"http://yoursite.com/2020/03/05/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/","excerpt":"java课程的学习笔记，部分和c++重合的内容不做描述","text":"java课程的学习笔记，部分和c++重合的内容不做描述 一、安装java 下载java 去Oracle官网下载。 添加环境变量 在&quot;系统变量&quot;中进行添加 添加JAVA_HOME 选择“新建”，变量名为JAVA_HOME，变量值为jdk的路径，例如C:\\Program Files\\Java\\jdk-12.0.2 添加CLASSPATH 选择“新建”，变量名为CLASSPATH，变量值为.;%JAVA_HOME%\\lib; 添加Path 找到Path项，双击打开（win7等直接在变量值最前面加），选择“新建”，变量值为jdk目录下bin文件夹的路径，例如C:\\Program Files\\Java\\jdk-12.0.2\\bin 测试是否安装成功 打开CMD窗口，输入java -version，有输出则说明安装完成。 二、基本数据类型 分类和长度 与c++一致，其中注意char型 类型 长度 初始值 范围 char 16 bits ‘\\u0000’ ‘\\u0000~\\uffff’ 浮点数 默认为double型 十进制数形式 由数字和小数点组成，且必须有小数点。 如：0.123, 1.23, 123.0 科学计数法形式 如：123e3或123E3，其中e或E之前必须有数字，且e或E后面的指数必须为整数。 float型的值,必须在数字后加f或F,如1.23f。 double型的值,可以在数字后加d或D,如1.23D。 转义符 转义字符 含义 \\n 回车(\\u000a) \\t Tab(\\u0009) \\b 空格(\\u0008) \\r 换行(\\u000d) \\f 换页(\\u000c) \\’ 单引号(\\u0027) \\&quot; 双引号(\\u0022) \\ddd 三位八进制 \\udddd 四位16进制 \\\\ 反斜杠(\\u005c) 三、输入输出 输出 使用System.out.print进行输出 System.out.print(); \\\\输出内容 System.out.println(); \\\\输出内容，并换行 System.out.printf(); \\*支持占位符 %d: 输出int型数据 %c: 输出char型数据 %f: 输出浮点型数据，小数部分最多保留6位 %s: 输出字符串数据 %md: 输出的int型数据占m列 %m.nf:输出的浮点型数据占m列，小数点保留n位。 */ 输入 使用输入需要先导入文件，import java.utli.*;或import java.utli.Scanner; 进行使用时，需要先创建Scanner对象 Scanner input = new Scanner(System.in); 在使用时使用input.next类型()来读取输入内容，例： int x = input.nextInt(); float y = input.nextFloat(); 四、格式差异 main函数 java main函数格式为 public static void main(String[] args) { } 类 类为 public class balabala() { }","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"主题中Container的使用","slug":"主题中Container的使用","date":"2020-03-04T06:09:24.000Z","updated":"2020-03-04T07:26:58.778Z","comments":true,"path":"2020/03/04/主题中Container的使用/","link":"","permalink":"http://yoursite.com/2020/03/04/%E4%B8%BB%E9%A2%98%E4%B8%ADContainer%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"fluid主题中Container的挖掘。","text":"fluid主题中Container的挖掘。 Fluid中Container的挖掘使用 在一个博客主题中看到了如下的&quot;提示框&quot;效果 就想着能不能在fluid主题中实现类似的效果，按照博客中的教程进行了设置后发现并不能使用，应该是不同主题的缘故。这个想法也就作罢了。 但今天在根据fluid主题在github上的更新记录添加“文章更新时间”功能的时候，发现在post.ejs中使用了一个note-warning的类，原本只是想要修改一下这个note的样式，从黄色调成蓝色，然后在其对应的css文件中（路径：fluid\\source\\lib\\mdbootstrap\\css\\mdb.min.css发现不止有note-waring类，还有note-primary、note-info等一系列类，一想这个跟上图中的提示框的代码相近，会不会有相同的效果？于是进行了尝试，发现果真如此！虽然不能像上图那个博客一样通过下面那种格式来使用 ::: info here if info ::: 但是在markdown中同样可以通过html的语法来进行调用。 &lt;p class=\"note note-primary\"&gt;here is note-primary&lt;/p&gt; &lt;p class=\"note note-secondary\"&gt;here is note-secondary&lt;/p&gt; &lt;p class=\"note note-success\"&gt;here is note-success&lt;/p&gt; &lt;p class=\"note note-danger\"&gt;here is note-danger&lt;/p&gt; &lt;p class=\"note note-warning\"&gt;here is note-warning&lt;/p&gt; &lt;p class=\"note note-info\"&gt;here is note-info&lt;/p&gt; &lt;p class=\"note not-light\"&gt;here is note-light&lt;/p&gt; 效果依次为： here is note-primary here is note-secondary here is note-success here is note-danger here is note-warning here is note-info here is note-light 具体的样式可以在fluid\\source\\lib\\mdbootstrap\\css\\mdb.min.css搜索note定位后进行修改🤪🤪 建议修改`\\.deploy_git\\lib\\mdbootstrap\\css\\mdb.min.css`中的对应内容......不然在hexo g -d后修改不作数 ❔貌似在fluid\\source\\lib\\mdbootstrap\\css\\mdb.min.css下修改只在本地有效，在\\.deploy_git\\lib\\mdbootstrap\\css\\mdb.min.css中的修改在hexo g -d后也无效","categories":[{"name":"博客美化","slug":"博客美化","permalink":"http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"美化","slug":"美化","permalink":"http://yoursite.com/tags/%E7%BE%8E%E5%8C%96/"}]},{"title":"Latex的Katex渲染引擎设置","slug":"Latex的Katex渲染引擎设置","date":"2020-03-03T06:01:40.000Z","updated":"2020-03-03T06:28:24.812Z","comments":true,"path":"2020/03/03/Latex的Katex渲染引擎设置/","link":"","permalink":"http://yoursite.com/2020/03/03/Latex%E7%9A%84Katex%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E%E8%AE%BE%E7%BD%AE/","excerpt":"调用katex渲染引擎渲染latex中出现的一些问题","text":"调用katex渲染引擎渲染latex中出现的一些问题 Latex的Katex渲染引擎设置 由于需要在markdown中插入数学公式，因此了解到了Latex，但是在完成了公式的输入后发现hexo中并不能成功渲染Latex公式。为什么呢？这是因为hexo使用自带的hexo-renderer-marked引擎来渲染页面，但是hexo-renderer-marked引擎不能渲染Latex引擎，因此我们需要更换引擎。 供选择的有hexo-renderer-kramed和hexo-renderer-markdown-it-plus 不过由于kramed引擎不能支持markdown all in one中的下标&quot;~ ~“以及 上标”^ ^&quot;这类格式，因此本文使用hexo-renderer-markdown-it-plus引擎 在更换渲染引擎时首先需要先卸载原先的渲染引擎，再安装新引擎 npm uninstall hexo-renderer-marked --save npm install hexo-renderer-markdown-it-plus --save 安装kramed的话同理 npm uninstall hexo-renderer-marked --save npm install hexo-renderer-kramed --save 在安装完引擎后，在fluid的_config.yml中找到math项 math: enable: true specific: true engine: katex 将enable的值改为true，engine的值改为katex 由于这里将specific的值设为了true，所以在需要进行数学公式渲染的文章的font-matter中添加一条math: true，采用这种方法可以不影响不需要进行数学公式渲染的页面的加载速度。 这时候再hexo s发现界面中latex公式已经渲染成功了，但是不太美观 这时候还需要在fluid主题下的_static_prefix.yml文件中进行配置 在文件最后找到katex，将其值设为https://cdn.staticfile.org/KaTeX/0.11.1/此时再刷新页面即可看到渲染后的数学公式了 若看不到效果的话，依次执行 hexo clean hexo g hexo s 即可在localhost中看到渲染后的效果","categories":[{"name":"problems","slug":"problems","permalink":"http://yoursite.com/categories/problems/"}],"tags":[{"name":"problems","slug":"problems","permalink":"http://yoursite.com/tags/problems/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"数据库系统原理：第一章绪论","slug":"数据库系统原理：第一章绪论","date":"2020-02-28T05:49:53.000Z","updated":"2020-03-05T06:43:55.172Z","comments":true,"path":"2020/02/28/数据库系统原理：第一章绪论/","link":"","permalink":"http://yoursite.com/2020/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%EF%BC%9A%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BB%AA%E8%AE%BA/","excerpt":"数据库系统原理：第一章绪论，包括数据库系统概述、数据模型、数据库系统的结构和数据库系统的组成四部分内容。","text":"数据库系统原理：第一章绪论，包括数据库系统概述、数据模型、数据库系统的结构和数据库系统的组成四部分内容。 一、数据库系统概述 数据库的四个概念 数据（Data） 数据库（DB，Database） 长期存储在计算机内、有组织的、可共享的大量数据的集合 具有最小冗余度是较高的数据独立性 数据库管理系统（DBMS，Database Manage System）功能 是一个位于用户和操作系统之间的基础软件 数据库系统（DBS，Database System） 指在计算机系统引入数据库后的系统构成 在不引起混淆的情况下可称数据库系统为数据库，视语境而言 特点 数据结构化 数据的共享性高，冗余度低且意扩充 数据独立性高 物理独立性 逻辑独立性 数据由数据库管理系统统一管理和控制 其中，DBS包括DB和DBMS DBMS是管理、建立、为何DB的必不可少的软件，一般讲DBMS及其建立的DB总称为DBS 为什么说文件系统中数据操作的效率低。 ——因为文件系统是针对某一特定应用的，所以当我们修改记录的时候，需要在文件中进行对应的修改，还需要考虑不同文件之间的联系，即文件系统的独立性差，所以文件系统中数据操作（比如增、删、改、查）的效率低下。 附：数据管理3个阶段的比较（图源中国大学MOOC中国人民大学相关课程） 二、数据模型 数据模型是数据库系统的核心和基础 2.1 两类数据模型 概念模型/信息模型 按用户的观点来对数据和信息建模，用于数据库设计 逻辑模型 和物理模型 逻辑模型按照计算机系统的观点对数据建模，用于DBMS实现 物理模型描述在系统内（磁盘上）的表示方式和存取方式 2.2 概念模型 基本概念 实体（Entity） 客观存在并可相互区别的事物称为实体，具体的人、事、物或抽象概念 属性（Attribute） 实体所具有的某一特性称为属性 码（Key） 唯一标识实体的属性集称为码 实体型（Entity Type） 用实体名及其属性名集合来抽象和刻画同类实体称为实体型 实体集（Entity Set） 同一类型实体的集合称为实体集 联系（Relationship） 事物 内部联系 以及事物 之间的联系 其中实体之间的联系有一对一(1:1)、一对多(1:m)和多对多(m:n)等类型(一对多可包含一对一) 以上图为例： 概念 —&gt; 所指 实体 —&gt; 学生 属性 —&gt; 学号、姓名、性别… 码 —&gt; 学号 实体型 —&gt; 学生 实体集 —&gt; 学生型的集合 此例中概念所对应的具体意思 实体:现实的一个学生 码:可以唯一确定一个学生的属性——学号 实体型:抽象出这些属性后，用这些属性描述的一个学生实体 概念模型的一种表示方法 实体-联系方法（Entity-Relationship Approach） 例如： 2.3数据模型的组成要素 数据模型由三部分组成 数据结构 数据结构用来描述系统的静态特性 一般什么结构就叫什么模型，例如 层次结构-层次模型、网状结构-网状模型、关系结构-关系模型… 数据操作 数据操作的类型（查询、增删修改等） 数据操作的语言（查询-Query，更新-DML等） 完整性约束 完整性规则：给定的数据模型中数据及其联系所具有的制约和依存规则 而完整性约束是一组完整性规则的集合 例如退休年龄的限制 2.4层次模型 层次模型用树形结构(类似数据结构中的树)来表示各类实体以及实体间的联系 表示方法 实体型：用记录类型描述 树形：用字段描述 联系：用结点之间的连线表示记录类型之间的一对多的父子联系 定义 满足下面两个条件： 有且只有一个结点没有双亲结点，即根节点 根以外的其他结点有且只有一个双亲结点 优点 层次模型的数据结构比较简单清晰 查询效率高，性能优于关系模型，不低于网状模型 提供了良好的完整性支持 缺点 结点之间的多对多联系表示不自然 对插入和删除操作的限制比较多（相当于数据结构增删结点，要考虑子节点） 查询子女结点必须通过双亲结点（树特点） 2.5网状模型 网状数据库系统采用网状结构来表示各类实体以及实体间的联系 表示方法 和层次结构相同 实体型：用记录类型描述 树形：用字段描述 联系：用结点之间的连线表示记录类型之间的一对多的父子联系 定义 满足下面两个条件： 允许一个以上的结点无双亲 一个结点可以有多于一个的双亲 示例： 优点 更直接地描述现实世界，如一个结点可以有多个双亲，比层次结构更符合实际 具有良好的性能 缺点 结构复杂，尤其是环境扩大时 2.6关系模型 在用户观点下，关系模型中数据的逻辑结构是一张二维表 关系：一个关系对应通常的一张表 元组：表中的一行即为一个元组 属性：表中的一列即为一个属性 主码：也称码键。表中的可以唯一确定一个元祖的某个属性组 域：属性的取值范围(例如学生的“年龄”属性的域为（15-45）) 分量：元组中的一个属性值 关系模式：对关系的描述 关系名（属性1，属性2…，属性n） 学生（学号(主码)，姓名，年龄，系别） 关系必须是规范化的，最基本的规范条件为 每一个分量必须是一个不可分的数据项，即表中不能还有表。 例如工资表，包含职工号、姓名、职称、工资四个属性，若工资在表中又分为基本工资、红利、税收，那么这个“工资”项即使另一份小表，说明该工资表中有表，不是规范关系。 关系模型与常规表格术语对照 关系术语 表格术语 关系名 表名 关系模式 表头（表格的描述） 关系 一张表 元组 记录或行 属性 字段或列 属性名 字段名或列名 属性值 列值 分量 一条记录中一个列值 非规范关系 表中有表（合并单元格） 2.7三种常用模型比较 层次模型 网状模型 关系模型 数据结构 层次结构——树 网状结构——树 关系结构——二维表 数据模型 层次模型 网状模型 关系模型 三、数据库系统的结构 3.1数据库系统模式的概念 模式：一系列关系模式 实例：模式的一个具体值 例： “学生选课数据库”模式：学生、课程和学生选课3个关系模式： 学生表：Student(Sno,Sname,Sage) 课程表：Course(Cno,Cname) 学生选课表：SC(Sno,Cno,Grage) “学生选课数据库”实例： 2019年学生数据库实例 2019年学校所开设的所有课 2019年所有学生选课情况 3.2数据库的三级模式结构 模式（也称逻辑模式） 是数据库中全体数据的逻辑结构和特征的描述 一般，某个应用的数据库只有一个模式 模式是数据库系统模式结构的中心 与数据的物理存储模式以及具体的应用程序开发无关 定义模式 定义数据之间的联系 定义与数据有关的安全性、完整性要求 外模式（也称子模式或用户模式） 是与某一具体应用有关的数据的逻辑表示 外模式通常是模式的子集，一个模式可以有多个外模式 一个外模式可以为多个应用所用，一个应用只能用一个外模式 用途 使用户只能看见和访问所对应外模式中的数据，简化用户视图的同时保证数据库安全 内模式（也称存储模式） 是数据物理结构和存储方式的描述 是数据在数据库内部的表示方式 如存储方式（顺序存储、堆存储…） 数据是否压缩 数据是否加密 … 一个数据库只有一个内模式 3.3数据库的二级映像 三级模式是对数据的三个抽象级别 二级映像是指不同模式之间的转换：外模式-&gt;模式-&gt;内模式 外模式-&gt;模式 定义外模式与模式之间的转换对应关系 因为只有一个模式，有多个外模式，所以数据库中外模式/模式映像是不唯一的 保证逻辑独立性 当模式改变时，不需要修改外模式，只需要修改外模式/模式映像，同时因为外模式不变，所以应用程序也不用进行修改，保证了数据与程序之间的逻辑独立性，简称数据的逻辑独立性 模式-&gt;内模式 定义模式与内模式之间的转换对应关系 因为只有一个模式，一个内模式，所以数据库中模式/内模式映像是唯一的 保证物理独立性 当数据库的存储结构改变了（比如选用另一种存储方式），数据库管理员只需要修改模式/内模式映像，不需要修改模式，模式不变，则应用程序也不变，保证了数据与程序之间的物理独立性，简称数据的物理独立性 四、数据库系统的组成 分为数据库、数据库管理系统、应用程序和数据库管理员 或硬件平台及数据库、软件、人员 其中的人员分可分为数据库管理员、系统分析员和数据库设计人员、应用程序员、最终用户，不同的人员涉及不同的数据抽象级别，具有不同的数据视图","categories":[{"name":"数据库系统原理","slug":"数据库系统原理","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"数据库系统原理","slug":"数据库系统原理","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"信安原理第一课","slug":"信安原理：信息安全威胁","date":"2020-02-27T08:42:26.000Z","updated":"2020-03-05T06:44:02.700Z","comments":true,"path":"2020/02/27/信安原理：信息安全威胁/","link":"","permalink":"http://yoursite.com/2020/02/27/%E4%BF%A1%E5%AE%89%E5%8E%9F%E7%90%86%EF%BC%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81/","excerpt":"信息安全原理第一部分：网络安全威胁","text":"信息安全原理第一部分：网络安全威胁 网络安全威胁分类 网络霸权、网络恐怖主义、网络谣言、网络政治动员、网络欺凌、网络攻击和网络犯罪 根据信息流动过程分为四种威胁 中断威胁：(物理破坏系统、破坏网络结构等) 使合法用户不能正常访问网络资源 使有严格时间要求的服务不能及时得到响应 截获威胁：(窃听信息，非法复制程序、数据等) 指一个非授权方介入系统，使得信息在传输中被丢失或泄露的攻击 篡改威胁： 以非法手段窃得对信息的管理权，来篡改信息 伪造威胁： 一个非授权方将伪造的客体插入系统，破坏信息的可认证性 在四种威胁中， 中断威胁破坏信息系统可用性，截获威胁破坏信息保密性， 篡改威胁破坏信息完整性，伪造威胁破坏信息可认证性。","categories":[{"name":"信息安全原理","slug":"信息安全原理","permalink":"http://yoursite.com/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"信安原理","slug":"信安原理","permalink":"http://yoursite.com/tags/%E4%BF%A1%E5%AE%89%E5%8E%9F%E7%90%86/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"第二章：数据表示与逻辑电路基础","slug":"第二章：数据表示与逻辑电路基础","date":"2020-02-26T09:23:21.000Z","updated":"2020-03-05T06:43:42.224Z","comments":true,"path":"2020/02/26/第二章：数据表示与逻辑电路基础/","link":"","permalink":"http://yoursite.com/2020/02/26/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA%E4%B8%8E%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/","excerpt":"计算机组成原理——第二章：数据表示与逻辑电路基础 包括机器数、定点与浮点数、数据校验、奇偶校验、CRC校验和海明校验等内容","text":"计算机组成原理——第二章：数据表示与逻辑电路基础 包括机器数、定点与浮点数、数据校验、奇偶校验、CRC校验和海明校验等内容 一、机器数及其特点 机器内的数据表示 真值：符号用“+”，“-”表示的数据表示方法 机器数：符号数值化的数据表示方法，用0、1表示符号（二进制） 四种常见的机器数：原码，反码，补码，移码 设定点数的形式为X0X1X2X3...XnX_0X_1X_2X_3...X_nX0​X1​X2​X3​...Xn​ 计算起来就是反码是原码取反（0-&gt;1,1-&gt;0，符号除外） 补码就是反码+1 移码的数值位与补码相同，符号位与补码相反 因此不能说“0”代表正号，“1”代表负号，因为在补码中如此，但在移码中相反 例如： (1)X=+1011 [X]原=[X]反=[X]补=01011 (2)X=-1011 [X]原=11011 [X]反=10100 [X]补=10101 (3)0的表示 [+0]原=00000 [-0]原=10000 [+0]反=00000 [-0]反=11111 [+0]补=00000=[-0]补 机器数表示的范围受字长的限制 原码和反码的0有两种表现形式；补码和移码的0只有1种表现形式 反码的运算 两个二进制数反码相加，最后得到的位数若大于两数的位数，则第一位加至最后一位 例： x=-1101，Y=-1010，则[X+Y]反为 二、定点与浮点数据表示 定点数 可见定点小数的的小数点在数字中间，定点整数的小数点在数字最后 浮点数 浮点数是把数的范围和精度分别表示的一种数据表示方法 一般格式 当计算机的字长确定时，分给阶码部分的位越多，数据表示的范围就越大，与此同时数据的精确度会下降 IEEE 754格式 IEEE 754格式与对应真值之间的变换流程如下 例： 将二进制数20.59375转换成32位IEEE754格式浮点数的二进制格式 IEEE754浮点数ｘｘｘ的二进制存储格式为(41360000)H，其对应的十进制值为？ 小数的原码计算方式： 小数项×2取整数部分，直到小数部分为0 例：0.375的小数表示过程 0.375 * 2 = 0.75 -------------- 0 0.75 * 2 = 1.5 -------------- 1 0.5 * 2 = 1 -------------- 1 所以0.375的二进制表示为.011 反之： 例：.011的十进制表示过程 0 * 10-1 + 1 * 10-2 + 1 * 10-3 =0.375 三、数据校验的基本原理 校验的基本原理是添加冗余码（校验位） 形成 [有效信息(k位)+校验信息(r )位] 的格式 码距：两个合法代码对应位上编码不同的位数称为码距 例如：10101和00110从第一位开始依次有第一位、第四、第五位不同，则码距为3 一组数中取码距最小的两对数的码距 码距 检错 纠错 1 0 0 2 1 0 3 2 或1 4 2 加1 5 2 加2 6 3 加2 7 3 加3 … 三个公式： 码距&gt;=eee+1 ——&gt;可检测e个错误 码距&gt;=2ttt+1 ——&gt;可纠正t个错误 码距&gt;=eee+ttt+1 ——&gt;可纠正t个错误，同时检测e个错误（e&gt;=t） 四、奇偶校验 基础知识 奇偶校验的原理同样是通过增加冗余码（校验位）来进行错误校验，奇偶校验的冗余码位数为一， 形成 [有效信息(k位)+校验信息(r=1)位] 的格式 通过增加的这个冗余码，使得整个编码中1的个数满足奇/偶校验的要求，如下 0001-&gt;00011 (偶校验) P=DP=DP=D1⊕D⊕D⊕D1⊕D⊕D⊕D2⊕D⊕D⊕D3⊕D⊕D⊕Dn 0001-&gt;00010 (奇校验) P=P=P= D1⊕D2⊕D3⊕Dn‾\\overline{D_1⊕D_2⊕D_3⊕D_n}D1​⊕D2​⊕D3​⊕Dn​​ 第一个式子中总共有两个1，所以是偶校验，第二个式子中总共有一个1，所以是奇校验 奇偶校验的编码与检错简单，编码效率高，但是它不能检测偶数位错误，所以它的无措结论是不可靠的，但是只有一位编码错误的时候，奇偶校验的检错率是100%，肯定能够检测出来。 奇偶校验只能检测一位错误，并且没有纠错能力，因此奇偶校验的码距是2 改进的奇/偶校验 改进后的奇/偶校验又称为双向奇偶校验、方块校验、垂直水平校验等 即在原有的一列奇偶校验码的基础上再添加一行奇偶校验码 这种校验方式可以检测并纠正一位错误，可以检测某行（列）上的奇数位错误，可以检测出一部分偶数位错误，不能检测出分布在矩形四个顶点上的错误。 一般在同步传输方式中常采用奇校验，异步传输中常采用偶校验 五、CRC校验（循环冗余校验） 基础知识 CRC校验的校验码的位数由一个公式得到N=k+r≤2r−1N=k+r\\leq2^r-1N=k+r≤2r−1，其中 rrr表示校验位数 kkk表示有效信息位数 2r−12^r-12r−1表示可以表现的错误总数（总共2r2^r2r种情况，其中一种是正确无错误） 格式仍然为 [有效信息(k位)+校验信息(r )位] CRC校验中存在一个生成多项式G(x)G(x)G(x),概念为:收发双方约定的一个 (r+1) 位二进制数，发送方利用G(x)G(x)G(x)对信息多项式做模2除运算，生成校验码。接收方利用G(x)G(x)G(x)对收到的编码多项式做模2除运算检测差错及错误定位 G(x)G(x)G(x)应该满足以下特点 最高位和最低位必须为1 当被传送信息（CRC码）任何一位发生错误时，被生成多项式做除后应该使余数不为0 不同位发生错误时，模2除运算后余数不同 对不为0余数继续进行模2除运算应使余数循环 以下为常见的生成多项式G(x)G(x)G(x) (N=k+r) N K 码距d G(x)多项式 G(x) 7 4 3 x2+x+1x^2+x+1x2+x+1 1011 7 4 3 x3+x2+1x^3+x^2+1x3+x2+1 1101 7 3 4 x4+x3+x2+1x^4+x^3+x^2+1x4+x3+x2+1 11101 7 3 4 x4+x2+x2+x+1x^4+x^2+x^2+x+1x4+x2+x2+x+1 10111 15 11 3 x4+x+1x^4+x+1x4+x+1 10011 15 7 5 x8+x7+x6+x4+1x^8+x^7+x^6+x^4+1x8+x7+x6+x4+1 111010001 31 26 3 x5+x2+1x^5+x^2+1x5+x2+1 100101 31 21 5 x10+x9+x8+x6+x5+x3+1x^{10}+x^9+x^8+x^6+x^5+x^3+1x10+x9+x8+x6+x5+x3+1 11101101001 63 57 3 x6+x+1x^6+x+1x6+x+1 1000011 63 51 5 x12+x10+x5+x4+x2+1x^{12}+x^{10}+x^5+x^4+x^2+1x12+x10+x5+x4+x2+1 1010000110101 一般情况下使用的都是1011 模2除运算 加/减运算（异或运算，相同为0，不同为1） 0 ±\\pm± 0=0，0 ±\\pm± 1=1，1 ±\\pm± 0=1，1 ±\\pm± 1=0 模2除法（见下） CRC编码 根据待校验信息的长度kkk，按照 k+r≤2r−1k+r\\leq2^r-1k+r≤2r−1 确定校验位rrr的位数 如对4位信息1100进行CRC编码，根据公式得rmin=3 根据rrr和生成多项式得选择原则，选择位数为r+1r+1r+1的生成多项式G(x)=1011 进行下列变化 [有效信息(k位)+校验信息(r 位)] —&gt; 1100 000 即先把校验位全设0，得Q(x) 对得到的Q(x)进行模2除运算 用得到的余数替换校验位，得到最后的CRC编码为 [有效信息(k位)+校验信息(r 位)] —&gt; 1100 000 —&gt; 1100 010 CRC检错与纠错 对得到校验码(即二进制编码数)，用G(x)作模2除，若得到一个不为0的余数，则说明信息出错了。 进行纠错 若余数不为0，若余数首位为1，则补零进行模2除，得到余数；若余数首位为0，则其剩下三位为余数，同时将被检测的校验码循环左移一位，由此得到第二个余数，直到余数为101时，说明此时的出错位已经移动到了最左端，将此时校验码的最左端数字取反，然后继续循环左移，直到移动位数之和为7，说明纠错完毕，出错位回到原位。例如一开始移动了4位，取反后继续移动3位。具体示例如下： 进行模2除运算得到的余数是循环的，顺序为：011-&gt;110-&gt;111-&gt;101-&gt;001-&gt;010-&gt;100-&gt;011 CRC校验得到的无措结论不一定是正确的 六、海明校验 海明校验的格式跟CRC校验相同 CRC校验的校验码的位数由一个公式得到N=k+r≤2r−1N=k+r\\leq2^r-1N=k+r≤2r−1，其中 rrr表示校验位数 kkk表示有效信息位数 2r−12^r-12r−1表示可以表现的错误总数（总共2r2^r2r种情况，其中一种是正确无错误） 在海明编码中存在两种数据，分别称为校验位和数据位，其中校验位的位数为rrr所表示的数字，设k+rk+rk+r位海明码从左到右依次为第1，2，3，4…k+r位，r位校验位记为PiP_iPi​(i=1,2,3…,r)，分别位于k+r位海明编码的第 2i-1(i=1,2,3…,r)位上，其余位依次放置被校验的数据位，记为bib_ibi​(i=1,2,3…,r) 例如：海明校验码中校验位和数据位的排列如下 HjH_jHj​位的数据被编号小于j的若干个海明位号之和等于j的校验位所校验，如： Hi 1 2 3 4 5 6 7 8 9 10 11 1 2 1,2 4 1,4 2,4 1,2,4 8 1,8 2,8 1,2,8 P1 P2 b1 P3 b2 b3 b4 P4 b5 b6 b7 得出：任何一位有效数据位至少被两位校验位所校验 用偶校验计算出P1P_1P1​~P4P_4P4​四个校验位的值： P1=b1 ⊕⊕⊕ b2 ⊕⊕⊕ b4 ⊕⊕⊕ b5 ⊕⊕⊕ b7 P2=b1 ⊕⊕⊕ b3 ⊕⊕⊕ b4 ⊕⊕⊕ b6 ⊕⊕⊕ b7 P3=b2 ⊕⊕⊕ b3 ⊕⊕⊕ b4 P4=b5 ⊕⊕⊕ b6 ⊕⊕⊕ b7 指错字G由校验位和被其校验的数据位依次做异或运算得到。 得指错字G4G3G2G1为： G4=P4 ⊕⊕⊕ b5 ⊕⊕⊕ b6 ⊕⊕⊕ b7 G3=P3 ⊕⊕⊕ b2 ⊕⊕⊕ b3 ⊕⊕⊕ b4 G2=P2 ⊕⊕⊕ b1 ⊕⊕⊕ b3 ⊕⊕⊕ b4 ⊕⊕⊕ b6 ⊕⊕⊕ b7 G1=P1 ⊕⊕⊕ b1 ⊕⊕⊕ b2 ⊕⊕⊕ b4 ⊕⊕⊕ b5 ⊕⊕⊕ b7 若G4G3G2G1为0，则表明数据没有出错，反之其十进制值为出错的海明吗位号。例题如下： 如上图所示的H=01100110000为例 指错字G4G3G2G1=0000，不一定说明无错 例如P1、b1、P2三位同时出错，则G4G3G2G1依然为0 一位错和两位错不能由指错字区别 如b1、b2同时出错，与仅b3出错时的指错字均为G4G3G2G1=0110","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"第一章：计算机系统概论","slug":"第一章-计算机系统概论","date":"2020-02-24T06:16:42.000Z","updated":"2020-03-05T09:08:20.056Z","comments":true,"path":"2020/02/24/第一章-计算机系统概论/","link":"","permalink":"http://yoursite.com/2020/02/24/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/","excerpt":"计算机组成原理——第一章：计算机系统概论笔记 包括冯·诺依曼结构和计算机系统性能评价两大块内容","text":"计算机组成原理——第一章：计算机系统概论笔记 包括冯·诺依曼结构和计算机系统性能评价两大块内容 冯·诺依曼结构 一、 工作原理 存储程序 程序控制 二、计算机组成 硬件系统 主机:CPU（运算器+控制器）、内存 算术运算：加减乘除等 逻辑运算：与或非等 基本结构：算术逻辑运算单元（ALU）、计算用累加器、保存结果用寄存器 控制器：更新 基本功能：控制指令的执行，依据指令产生控制信号（电平信号、脉冲信号） 产生控制信号的依据：指令、状态、时序 产生方式：微程序、硬布线 存储器： 基本结构：地址总线、存储体、数据总线 功能：存储原程序、原数据和运算中间结构 工作模式：读/写 工作原理：按地址访问、读/写数据 容量 地址线数量 1k 10 1M 20 1G 30 例题：访问2Gb容量的空间，需要的地址线数量为？ 因为2¹=2，所以数量为30+1=31根 230=1GB，表示有230个地址，但2Gb时230个地址不够用（1字节一个地址），所以需要231个地址 CPU执行一条指令通常存在两个过程，分别是取指阶段和执行阶段，在取指阶段访问存储器读取指令，执行阶段访问存储器读取数据，所以虽然指令和数据都是二进制表示，但CPU能够加以区分。 2. 外设：输入设备、输出设备、外存储器 3. 总线： 能为系统中多个部件分时 共享的一组 信息传输线 及 相关逻辑 共享：总线所连的各部件通过它来传递信息。 分时：某一时刻只允许一个部件向总线发送信息。 就所有部件都通过总线来传送信息，若可以同时传输信息的话，假如A部件需要传输一个高电平信号，部件B传输一个低电平信号，那么就无法判断到底是高点平信号还是低电平信号。 如何实现分时传输信号呢？在数字电路中通过三态门来进行这一操作。 三态门通过&quot;输出使能&quot;来使这一路获得除高低外的第三态——高阻态，即阻值巨大相当于断路。 这样在硬件不使用时，通过输出使能让该路形成“伪断路”，不向总线传输信息，在使用时，让该路恢复，正常传输信息 总线的分类： 总线信号可以分成三组： 地址总线AB：传送地址信息 输出将要访问的内存单元或I/O端口的地址 地址线的多少决定了系统能够直接使用的最大的存储容量一般为单向，由CPU输出 数据总线DB：传送数据信息 CPU读操作时，外部数据通过数据总线送往CPU CPU写操作时，CPU数据通过数据总线送外外部 数据线的多少决定了一次能够传送数据的位数双向，即可由CPU向外也可由外向CPU 控制总线CB：传送控制信息 包括CPU送出的控制信号和主存或外设给CPU的反馈信号（双向） 此外总线还包括电源、地线等其他辅助信号。 软件系统 表现形式：程序和数据 核心：算法 软/硬件关系 相互依存 逻辑等效性：某些功能可以由硬件实现，也可以由软件实现 协同发展 三、计算机层次结构 计算机层次结构从上到下依次为： 应用程序 高级语言 汇编语言 操作系统 指令集架构层 微代码层 硬件逻辑层 在计算机的层次结构中，上下层是可以分割的，仅有下层而没有上层是可行的。上层是下层的功能实现，上层在下层的基础上实现更丰富的功能。 计算机系统性能评价 一、非时间指标 机器字长：指机器一次能处理的二进制位数 总线宽度：数据总线一次能并行传送的最大信息位数 主存容量：指一台计算机主存所包含的存储单元总数 存储带宽：指单位时间内与主存交换的二进制信息量 二、时间指标 主频 fff / 时间周期 TTT ，外频，倍频 主频f:指CPU内核工作的时钟频率，即CPU内数字脉冲信号振荡的速率 时钟周期T:计算机中最基本最小的时间单位，是CPU中两个功能部件之间传递信息所需要的最短时间 在一个时钟周期内，CPU仅能完成一个最基本的动作 外频：指CPU与主板之间同步的时钟频率 倍频：CPU主频与外频之间的倍数 主频=外频 * 倍频 例：奔腾4 2.4GCPU 主频2400M = 133M（外频）x 18（倍频） CPI(Clock cycle Per Instruction) 指执行一条指令平均需要的时钟周期数 计算方法 CPI=程序中所有指令的时钟周期之和/程序中指令总数 =∑(程序中各类指令的CPI x 程序中该指令的比例) 例： 指令类型 CPI 指令比例 算术和逻辑 1 60% Load/Store 2 18% 转移 4 12% Cache缺失访存​​​​ 8 10% CPI=1*60%+2*18%+4*12%+8*10%=2.24​​ MIPS(Million Instructions Per Second) 每秒钟CPU能执行的指令条数（单位：百万条/秒） 计算方法 主频/(CPI ∗*∗ 106)(全性能公式) CPI不变时，主频率越高，运行速度就越快。 例: 某计算机主频为1GHz，总指令数为2*10^5，比例如下 指令类型 CPI 指令比例 算术和逻辑 1 60% Load/Store 2 18% 转移 4 12% Cache缺失访存​​​​ 8 10% MIPS=fff/(CPI*106)=​​446.4 CPU时间 执行一段程序所需的时间：CPU时间+I/O时间+存储访问时间+各类排队时延等 计算方法： 程序中所有指令的时钟周期数之和∗*∗TTT 程序中所有指令的时钟周期数之和///fff 总指令数*CPI*T 指令数量/(MIPS*106) 例: 某计算机主频为1GHz，总指令数为2*10^5，比例如下 指令类型 CPI 指令比例 算术和逻辑 1 60% Load/Store 2 18% 转移 4 12% Cache缺失访存​​​​ 8 10% 一：基于CPI CPU时间=2*105*CPI///fff=（2*105*2.24/109)=4.48*10-4(秒) 二：基于MIPS CPU时间​​​=2*105/(MIPS*106)=4.48*10-4(秒)​​​​ 更新内容 控制器详解","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"fluid个性化","slug":"fluid个性化","date":"2020-02-24T02:23:23.000Z","updated":"2020-03-03T10:33:23.288Z","comments":true,"path":"2020/02/24/fluid个性化/","link":"","permalink":"http://yoursite.com/2020/02/24/fluid%E4%B8%AA%E6%80%A7%E5%8C%96/","excerpt":"各类参数的修改位置及作用、网页音乐播放器、评论模块、一言的调用等…","text":"各类参数的修改位置及作用、网页音乐播放器、评论模块、一言的调用等… fluid个性化及小插件的使用 网页标题浏览器恶搞 在\\themes\\fluid\\source\\js 下创建一个新的js文件，例如FunnyTitle.js，输入如下内容： // 浏览器搞笑标题 var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () { if (document.hidden) { $('[rel=&quot;icon&quot;]').attr('href', &quot;/img/avatar.png&quot;); document.title = '╭(°A°`)╮ 页面崩溃啦 ~'; clearTimeout(titleTime); } else { $('[rel=&quot;icon&quot;]').attr('href', &quot;/img/favicon.png&quot;); document.title = '(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~' + OriginTitle; titleTime = setTimeout(function () { document.title = OriginTitle; }, 2000); } }); 之后在\\themes\\fluid\\layout.ejs中末尾输入 &lt;!--浏览器搞笑标题--&gt; &lt;script type=\"text/javascript\" src=\"/js/FunnyTitle.js\"&gt;&lt;/script&gt; fluid鼠标点击效果更改 fluid主题的鼠标特效在\\themes\\fluid\\layout\\_partial\\plugins\\mouse-click.ejs中，找到如下图所示的代码 将数组中的字符串进行更改即可进行自定义 然后在主题配置（即fluid的_config.yml）中将mouse-clik项的style改为values 一言 一言官网 根据官网提供的示例，在\\themes\\fluid\\layout\\layout.ejs中添加如下代码 &lt;!-- 以下写法，选取一种即可 --&gt; &lt;!-- 现代写法，推荐 --&gt; &lt;!-- 兼容低版本浏览器 (包括 IE)，可移除 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js\"&gt;&lt;/script&gt; &lt;!--End--&gt; &lt;script&gt; fetch('https://v1.hitokoto.cn') .then(function (res){ return res.json(); }) .then(function (data) { var hitokoto = document.getElementById('hitokoto'); hitokoto.innerText = data.hitokoto; }) .catch(function (err) { console.error(err); }) &lt;/script&gt; &lt;!-- 老式写法，兼容性最忧 --&gt; &lt;script&gt; var xhr = new XMLHttpRequest(); xhr.open('get', 'https://v1.hitokoto.cn'); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { var data = JSON.parse(xhr.responseText); var hitokoto = document.getElementById('hitokoto'); hitokoto.innerText = data.hitokoto; } } xhr.send(); &lt;/script&gt; &lt;!-- 新 API 方法， 十分简洁 --&gt; &lt;script src=\"https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto\" defer&gt;&lt;/script&gt; 然后在任意想要加入一言的位置添加 &lt;p id=\"hitokoto\"&gt;:D 获取中...&lt;/p&gt; 例如我在页面的最底部，即hexo❤Fluid下方加入一言，即在\\themes\\fluid\\layout\\_partial\\footer.ejs中加入该行代码。在页面中显示的具体位置由代码所在位置决定。 一言官网举例了几个网址供读取信息 https://v1.hitokoto.cn/（从7种分类中随机抽取） https://v1.hitokoto.cn/?c=b （请求获得一个分类是漫画的句子） https://v1.hitokoto.cn/?c=f&amp;encode=text （请求获得一个来自网络的句子，并以纯文本格式输出 在本部分第一个代码块中将对应的网址更改即可，同样可以通过“&amp;”的方式指定多个特定的类型 https://v1.hitokoto.cn/?c=c&amp;c=d （从游戏分类和小说分类中获取一个句子） 参数列表如下，通过c=xx来使用 参数 描述 C a Anime - 动画 b Comic – 漫画 c Game – 游戏 d Novel – 小说 e Myself – 原创 f Internet – 来自网络 g Other – 其他 音乐播放插件 这里使用的是插件是APlayer 🎶Wow, such a beautiful HTML5 music player 原本用的是网易云的的外链播放器，然鹅！网易云几乎所有的歌都因版权问题无法生成外链播放器，即使通过一些方法生成了也无法播放，因此采用了APlayer。 首先安装Aplayer cnpm install aplayer --save 我因为网络的问题替换了成了淘宝的镜像，若没有设置过直接使用npm即可。 在想要加入网页播放器的地方输入以下代码 &lt;html&gt; &lt;head&gt; &lt;link href=\"https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css\" rel=\"stylesheet\"&gt; &lt;script src=\"https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js\"&gt;&lt;/script&gt; &lt;style&gt; .demo{width:360px;margin:0px auto 20px auto} .demo p{padding:10px 0} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"text-center\"&gt; &lt;div class=\"demo\"&gt; &lt;div id=\"player1\"&gt; &lt;pre class=\"aplayer-lrc-content\"&gt; [00:00.00]鹿先森乐队 - 华年 [00:00.30] [00:00.91]作曲：倍倍 [00:01.66]作词：倍倍 [00:01.26]编曲：鹿先森乐队 [00:01.52]木吉他：杨博士 [00:01.77]电吉他：董二胖 [00:02.28]贝斯：李斯 [00:02.17]键盘：冰冰 [00:02.38]鼓：PP [00:02.48]和音：鱼椒盐、杨博士 [00:02.83]弦乐：国际首席爱乐乐团 [00:03.24]录音棚：55T.E.C、Big.J Studio [00:03.49]混音助理：茆博文 [00:03.79]制作人：李卓 [00:04.10]弦乐编写：李卓 [00:04.25]混音：李卓 [00:04.40]母带处理：周天澈 [00:05.00] [00:05.80]在夏天结束的瞬间 [00:07.42]怀念你年轻身影 [00:11.42]你每天都在说的那些话 [00:13.90]如今讲给谁人听 [00:16.94]当过往散了爱慕 [00:19.16]与光阴相向而行 [00:22.71]你眼神烙印岁月最后的深情 [00:25.88] [00:28.42]也许一次离别 [00:29.69]就能抹去再多的重逢 [00:33.91]那年一起种下的树啊 [00:36.55]如今飘荡着一样的风 [00:39.59]当誓言终将欺了日月 [00:42.32]这爱恋不澈不浓 [00:45.25]你裙摆绽放走向我脚步轻松 [00:48.88] [00:50.61]可是命运啊 [00:51.52]渴望啊和热烈啊 [00:55.92]非将这生长赋予 [00:57.39]悲欢交织的感动 [01:01.93]夏日轻柔的晚风 [01:04.81]壮阔波澜的相拥 [01:07.16]已杂草丛生 [01:10.56]都不及你第一次 [01:12.13]望向我的面容 [01:14.55] [01:19.23]也许一次离别 [01:20.50]就能抹去再多的重逢 [01:24.61]那年一起种下的树啊 [01:27.44]如今飘荡着一样的风 [01:30.37]当誓言终将欺了日月 [01:33.16]这爱恋不澈不浓 [01:36.21]你裙摆绽放走向我脚步轻松 [01:39.55] [01:40.77]可是命运啊 [01:42.44]渴望啊和热烈啊 [01:46.69]非将这生长赋予 [01:48.26]悲欢交织的感动 [01:52.76]夏日轻柔的晚风 [01:55.56]壮阔波澜的相拥 [01:57.99]已杂草丛生 [02:01.64]都不及你第一次 [02:03.70]望向我的面容 [02:05.10] [02:06.29]可是青春啊 [02:07.82]鲜血啊和真切啊 [02:12.18]请铭记呀 [02:13.22]即使从未有过年轻 [02:18.18]阳光穿过你的脖颈 [02:20.96]酒杯碰碎的声音 [02:23.27]时光忽暗忽明 [02:27.68]都忘却吧 [02:28.80]就像从未有过年轻 [02:30.55] [03:02.65]可是命运啊 [03:04.37]渴望啊和热烈啊 [03:08.47]非将这生长赋予 [03:10.94]悲欢交织的感动 [03:14.65]夏日轻柔的晚风 [03:17.47]壮阔波澜的相拥 [03:19.69]已杂草丛生 [03:23.54]都不及你第一次 [03:24.91]望向我的面容 [03:26.88] [03:28.94]可是青春啊 [03:29.71]鲜血啊和真切啊 [03:35.28]请铭记呀 [03:36.50]即使从未有过年轻 [03:41.50]阳光穿过你的脖颈 [03:44.23]酒杯碰碎的声音 [03:46.52]时光忽暗忽明 [03:50.37]都忘却吧 [03:51.33]就像从未有过年轻 [03:55.73]都忘却吧 [03:56.94]就像从未有过年轻 [04:01.40]都忘却吧 [04:02.56]就像从未有过年轻 [04:06.91]书终烟灭夜深水静 &lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; var ap = new APlayer ({ element: document.getElementById('player1'), narrow: false, autoplay: false, showlrc: true, music: { title: '华年', author: '鹿先森乐队', url: 'http://music.163.com/song/media/outer/url?id=542667160.mp3', pic: 'http://p2.music.126.net/r94mVfx8ERhRr7Zzemhd_w==/109951163405599390.jpg' } }); ap.init(); &lt;/script&gt; 例如我将播放器加入到“关于”界面，就在\\themes\\fluid\\layout\\about.ejs中加入这段代码，在这里我将代码嵌入跟原有代码进入了稍微的整合，使结构清晰。 在上述代码的script块中，autoplay是自动播放，改为true则会在打开该页面时自动播放。 在网页版网易云音乐搜索歌曲，打开后将网址的最后一串数字替换到url中对应的数字部分即可更换歌曲 歌曲封面由pic字段决定，同样在网页版网易云音乐界面，在F12开发者模式中选中歌曲封面区域即可得到封面链接，替换至pic区域即可。歌词来自https://www.90lrc.cn/ 参考网址：https://blog.csdn.net/jclian91/article/details/80876198","categories":[{"name":"博客美化","slug":"博客美化","permalink":"http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"美化","slug":"美化","permalink":"http://yoursite.com/tags/%E7%BE%8E%E5%8C%96/"}]},{"title":"Failed to connect to github.com port 443: Timed out","slug":"hexo-Failed-to-connect-to-github-com-port-443-Timed-out","date":"2020-02-22T14:54:17.000Z","updated":"2020-02-23T11:07:02.675Z","comments":true,"path":"2020/02/22/hexo-Failed-to-connect-to-github-com-port-443-Timed-out/","link":"","permalink":"http://yoursite.com/2020/02/22/hexo-Failed-to-connect-to-github-com-port-443-Timed-out/","excerpt":"Failed to connect to github.com port 443: Timed out","text":"Failed to connect to github.com port 443: Timed out Failed to connect to github. com port 443: Timed out 在使用hexo g -d部署到github上时出现了“Failed to connect to github. com port 443: Timed out”的错误提示。 解决办法 输入 git config --global http.proxy http://127.0.0.1:1080 git config --global https.proxy http://127.0.0.1:1080","categories":[{"name":"problems","slug":"problems","permalink":"http://yoursite.com/categories/problems/"}],"tags":[{"name":"problems","slug":"problems","permalink":"http://yoursite.com/tags/problems/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-02-21T09:24:43.209Z","updated":"2020-03-04T11:13:57.764Z","comments":true,"path":"2020/02/21/hello-world/","link":"","permalink":"http://yoursite.com/2020/02/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new \"My New Post\" More info: Writing Run server _[HTML]: Hyper Text Markup Language $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to remote sites $ hexo deploy More info: Deployment graph TD; A-->B; A-->C; B-->D; C-->D;","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}